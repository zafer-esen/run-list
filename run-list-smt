#!/bin/bash

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

source "$script_dir/options-parser"

{
# Print summary including system setup
echo    "tool-name       : "$TOOLNAME
echo    "tool-version    : "$TOOLVERSION
echo    "tool-options    : "$TOOLOPTIONS
echo    "cpu-time-limit  : "$CPUTIMELIMIT s
echo    "wall-time-limit : "$WALLTIMELIMIT s
echo -n "os              : "; (uname)
echo -n "cpu-model       : "; (lscpu | grep "Model name" | sed 's/^.*: * //')
echo -n "cpu-count       : "; (nproc)
echo -n "architecture    : "; (lscpu | grep "Architecture" | sed 's/^.*: * //')
echo -n "mem-total       : "; (grep "MemTotal" /proc/meminfo | sed 's/^.*: * //')
echo -n "start-date      : "; (date +'%Y-%m-%d %H:%M:%S')
echo    "script-dir      : "$PWD
echo    "notes           : "$NOTES

ulimit -t $CPUTIMELIMIT

echo
for name in `cat $1`; do
  echo "filename : "$name

  # todo: review this line to get the expected status from other files, e.g.,
  #       maybe YML files for SV-Comp benchmarks
  echo -n "expected : ";(grep ':status' $name)

	start_time="$(date -u +%s)"
  echo "output   : "

  timeout $WALLTIMELIMIT $BIN $name $TOOLOPTIONS 2>&1

  xs=$?
  case $xs in
      (0) ;;
      (124) echo "wall timeout";;
      (137) echo "killed";;
      (*)   echo "other error";;
  esac

  exit_status=$?
  if [[ $exit_status -eq 124 ]]; then
      echo "timeout"
  fi

  end_time="$(date -u +%s)"
  elapsed="$(($end_time-$start_time))"
  echo "duration : $elapsed s"
  echo
done
}> ${1}-$TOOLNAME-$(date -u +%y%m%d-%H%M%S).log1


